/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package exlcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class feex_t implements lcm.lcm.LCMEncodable
{
    public short len;
    public byte msg[];
 
    public feex_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x3214af487eb25643L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
        System.out.println(String.format("LCM_FINGERPRINT = 0x%08X", LCM_FINGERPRINT));
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(exlcm.feex_t.class))
            return 0L;
 
        classes.add(exlcm.feex_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeShort(this.len); 
 
        if (this.len > 0)
            outs.write(this.msg, 0, len);
 
    }
 
    public feex_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public feex_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static exlcm.feex_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        exlcm.feex_t o = new exlcm.feex_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.len = ins.readShort();
 
        this.msg = new byte[(int) len];
        ins.readFully(this.msg, 0, len); 
    }
 
    public exlcm.feex_t copy()
    {
        exlcm.feex_t outobj = new exlcm.feex_t();
        outobj.len = this.len;
 
        outobj.msg = new byte[(int) len];
        if (this.len > 0)
            System.arraycopy(this.msg, 0, outobj.msg, 0, this.len); 
        return outobj;
    }
 
}

